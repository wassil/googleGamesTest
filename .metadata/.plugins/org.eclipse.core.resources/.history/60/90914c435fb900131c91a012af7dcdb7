package com.facebook.testing.jdudak.tictactoe;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;

import com.facebook.testing.jdudak.tictactoe.R;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.games.Games;
import com.google.android.gms.games.request.GameRequest;
import com.google.android.gms.games.request.Requests;
import com.google.android.gms.games.request.Requests.UpdateRequestsResult;
import com.google.example.games.basegameutils.BaseGameActivity;

import android.app.Activity;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;


public class MainMenuFragment extends Fragment {

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View v = inflater.inflate(R.layout.fragment_main_menu, container, false);
		
		Button buttonNewGame = (Button)v.findViewById(R.id.buttonNewGame);
		buttonNewGame.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				Log.i(Const.TAG, "new game button clicked");
			}
		});
		
		final GoogleApiClient client = ((BaseGameActivity)getActivity()).getApiClient();
		
		Button buttonAchievement = (Button)v.findViewById(R.id.buttonClickAchievement);
		buttonAchievement.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				Games.Achievements.unlock(client, getResources().getString(R.string.achievement_click_button_once));
				Games.Achievements.increment(client, getResources().getString(R.string.achievement_clicked_button_10_times), 1);
				Games.Achievements.increment(client, getResources().getString(R.string.achievement_clicked_button_20_times), 1);
				Games.Achievements.increment(client, getResources().getString(R.string.achievement_clicked_button_50_times), 1);
				Log.i(Const.TAG, "achievement button clicked");
			}
		});
		Button buttonShowAchievements = (Button)v.findViewById(R.id.buttonShowAchievements);
		buttonShowAchievements.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(
					Games.Achievements.getAchievementsIntent(client), 
					Const.REQUEST_ACHIEVEMENTS
				);
			}
		});
		
		//Games.Leaderboards.submitScore(client, getResources().getString(R.string.leaderboard_score), 1337);
		Button buttonShowLeaderboards = (Button)v.findViewById(R.id.buttonShowLeaderboards);
		buttonShowLeaderboards.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(
					Games.Leaderboards.getLeaderboardIntent(client, getResources().getString(R.string.leaderboard_score)),
					Const.REQUEST_LEADERBOARDS
				);
			}
		});
		
		Button buttonSendGift = (Button)v.findViewById(R.id.buttonSendGift);
		buttonSendGift.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(
					Games.Requests.getSendIntent(
						client, 
						GameRequest.TYPE_GIFT, 
						"Puppies and shit".getBytes(), 
						Const.GIFT_REQUEST_LIFETIME, 
						BitmapFactory.decodeResource(getResources(),R.drawable.puppy), 
						"Puppies and shit"
					),
					Const.REQUEST_GIFT
				);
			}
		});
		
		Button buttonGiftInbox = (Button)v.findViewById(R.id.buttonGiftInbox);
		buttonGiftInbox.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(Games.Requests.getInboxIntent(client), Const.REQUEST_SHOW_GIFT_INBOX);
			}
		});
		
		return v;
	}
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
	    switch (requestCode) {
	        case Const.REQUEST_SHOW_GIFT_INBOX:
	            if (resultCode == Activity.RESULT_OK && data != null) {          
	                handleInboxResult(Games.Requests.getGameRequestsFromInboxResponse(data));
	            } else {
	                Log.v(Const.TAG, "error handling requests");
	            }
	            break;
	    }
	    super.onActivityResult(requestCode, resultCode, data);
	}
	
	private void handleInboxResult(ArrayList<GameRequest> requests) {
		final GoogleApiClient client = ((BaseGameActivity)getActivity()).getApiClient();
		
		ArrayList<String> requestIds = new ArrayList<String>();
		final HashMap<String, GameRequest> gameRequestMap = new HashMap<String, GameRequest>();
		for (GameRequest request : requests) {
		   String requestId = request.getRequestId();
		   requestIds.add(requestId);
		   gameRequestMap.put(requestId, request);
		}
		
		final Activity activity = getActivity();
		Games.Requests.acceptRequests(client, requestIds).setResultCallback(
			new ResultCallback<UpdateRequestsResult>() {
				@Override
				public void onResult(UpdateRequestsResult result) {
					for (String requestId : result.getRequestIds()) {
						if (!gameRequestMap.containsKey(requestId)
						        || result.getRequestOutcome(requestId) 
						        != Requests.REQUEST_UPDATE_OUTCOME_SUCCESS) {
							continue;
						}
					    switch (gameRequestMap.get(requestId).getType()) {
					    	case GameRequest.TYPE_GIFT:
							String rs = new String(gameRequestMap.get(requestId).getData());
					    	Toast.makeText(activity, ("You got "+rs), Toast.LENGTH_LONG).show();
					        break;
					    	case GameRequest.TYPE_WISH:
					        break;
					    }
					}
				}
			}
		);
	}	
}