package com.facebook.testing.jdudak.tictactoe.gifts;

import java.util.ArrayList;
import java.util.HashMap;

import com.facebook.testing.jdudak.tictactoe.Const;
import com.facebook.testing.jdudak.tictactoe.R;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.games.Games;
import com.google.android.gms.games.request.GameRequest;
import com.google.android.gms.games.request.Requests;
import com.google.android.gms.games.request.Requests.UpdateRequestsResult;
import com.google.example.games.basegameutils.BaseGameActivity;

import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;


public class GiftsFragment extends Fragment {
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		setHasOptionsMenu(true);
		super.onCreate(savedInstanceState);
	}
	
	@TargetApi(Build.VERSION_CODES.HONEYCOMB)
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		View v = inflater.inflate(R.layout.fragment_gifts, container, false);
		
		getActivity().getActionBar().setDisplayHomeAsUpEnabled(true);;
		
		final GoogleApiClient client = ((BaseGameActivity)getActivity()).getApiClient();
		
		
		Button buttonSendGift = (Button)v.findViewById(R.id.buttonSendGift);
		buttonSendGift.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(
					Games.Requests.getSendIntent(
						client, 
						GameRequest.TYPE_GIFT, 
						"Puppies and shit".getBytes(), 
						Const.GIFT_REQUEST_LIFETIME, 
						BitmapFactory.decodeResource(getResources(),R.drawable.puppy), 
						"Puppies and shit"
					),
					Const.REQUEST_GIFT
				);
			}
		});
		
		Button buttonSendWish = (Button)v.findViewById(R.id.buttonSendWish);
		buttonSendWish.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(
					Games.Requests.getSendIntent(
						client, 
						GameRequest.TYPE_WISH, 
						"Puppies and shit".getBytes(), 
						Const.GIFT_REQUEST_LIFETIME, 
						BitmapFactory.decodeResource(getResources(),R.drawable.puppy), 
						"I want puppies and shit"
					),
					Const.REQUEST_GIFT
				);
			}
		});
		
		Button buttonGiftInbox = (Button)v.findViewById(R.id.buttonGiftInbox);
		buttonGiftInbox.setOnClickListener(new View.OnClickListener() {			
			@Override
			public void onClick(View v) {
				startActivityForResult(Games.Requests.getInboxIntent(client), Const.REQUEST_SHOW_GIFT_INBOX);
			}
		});
		
		return v;
	}
	
	/*
	 * Accept all of them, just show toast
	 */
	public static void handleRequests(ArrayList<GameRequest> requests, final Activity activity) {
		final GoogleApiClient client = ((BaseGameActivity)activity).getApiClient();
		
		ArrayList<String> requestIds = new ArrayList<String>();
		final HashMap<String, GameRequest> gameRequestMap = new HashMap<String, GameRequest>();
		for (GameRequest request : requests) {
		   String requestId = request.getRequestId();
		   requestIds.add(requestId);
		   gameRequestMap.put(requestId, request);
		}
		
		Games.Requests.acceptRequests(client, requestIds).setResultCallback(
			new ResultCallback<UpdateRequestsResult>() {
				@Override
				public void onResult(UpdateRequestsResult result) {
					for (String requestId : result.getRequestIds()) {
						if (!gameRequestMap.containsKey(requestId)
						    || result.getRequestOutcome(requestId) != Requests.REQUEST_UPDATE_OUTCOME_SUCCESS) {
							continue;
						}
			    		String rs = new String(gameRequestMap.get(requestId).getData());
					    switch (gameRequestMap.get(requestId).getType()) {
					    	case GameRequest.TYPE_GIFT:
					    		Toast.makeText(activity, ("You got "+rs), Toast.LENGTH_LONG).show();
					        break;
					    	case GameRequest.TYPE_WISH:
					    		Toast.makeText(activity, ("Sending requested "+rs), Toast.LENGTH_LONG).show();
					        break;
					    }
					}
				}
			}
		);
	}	
	
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
	    switch (requestCode) {
	        case Const.REQUEST_SHOW_GIFT_INBOX:
	            if (resultCode == Activity.RESULT_OK && data != null) {          
	                handleRequests(Games.Requests.getGameRequestsFromInboxResponse(data));
	            } else {
	                Log.v(Const.TAG, "error handling requests");
	            }
	            break;
	    }
	    super.onActivityResult(requestCode, resultCode, data);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			case android.R.id.home:
				Log.v(Const.TAG, "back button");
				getActivity().finish();
				return true;
		}
		return super.onOptionsItemSelected(item);
	}
}